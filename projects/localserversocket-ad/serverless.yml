service: localserversocket-ad
frameworkVersion: '3'

plugins:
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-2
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        - arn:aws:dynamodb:us-east-2:824759482132:table/orders-payload
        - arn:aws:dynamodb:us-east-2:824759482132:table/orders-payload/index/storeId
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:::*/@connections/"

functions:
  onconnect:
    handler: app/src/infrastructure/websocket/ConnectionHandler.connectionHandler
    events:
      - websocket:
          route: $connect
          authorizer:
            arn: arn:aws:lambda:us-east-2:824759482132:function:auth-apps-wssauthorizer
            identitySource:
              - 'route.request.querystring.clientId'
              - 'route.request.querystring.clientSecret'

  ondisconnect:
    handler: app/src/infrastructure/websocket/DisconnectionHandler.disconnectionHandler
    events:
      - websocket:
          route: $disconnect
  default:
    handler: app/src/infrastructure/websocket/DefaultHandler.defaultHandler
    events:
      - websocket:
          route: $default
    environment:
      APIGATEWAY_UID: !Ref WebsocketsApi
      APIGATEWAY_ENDPOINT:
        !Join
          - ''
          - - !Ref WebsocketsApi
            - '.execute-api.'
            - ${opt:region, self:provider.region}
            - '.amazonaws.com/'
            - ${opt:stage, self:provider.stage}
  order:
    handler: app/src/infrastructure/queue/OrderHandler.orderHandler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - OrderBillingQueue
              - Arn
    environment:
      APIGATEWAY_UID: !Ref WebsocketsApi
      APIGATEWAY_ENDPOINT:
        !Join
          - ''
          - - !Ref WebsocketsApi
            - '.execute-api.'
            - ${opt:region, self:provider.region}
            - '.amazonaws.com/'
            - ${opt:stage, self:provider.stage}

# AWS Resources
resources:
  Resources:
    OrderBillingQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: Rf_Co_OrderBilling_Queue.fifo
        FifoQueue: true
        ContentBasedDeduplication: true
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt DeadLetterMessagesQueue.Arn
          maxReceiveCount: 3
        VisibilityTimeout: 5      
    DeadLetterMessagesQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: DLQ_Rf_Co_OrderBilling_Queue.fifo
        FifoQueue: true
        MessageRetentionPeriod: 172800
        ContentBasedDeduplication: true

custom:
  customDomain:
    websocket:
      domainName: localserversocket-ad.muydev.com
      basePath: ''
      stage: ${self:provider.stage}
      certificateName: '*.muydev.com'
      createRoute53Record: true
      endpointType: 'regional'
      securityPolicy: tls_1_2